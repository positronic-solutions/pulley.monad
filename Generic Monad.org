#+author: Nathan Davis

#+begin_comment
Copyright 2016 Positronic Solutions, LLC.

This file is part of pulley.monad.

pulley.monad is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

pulley.monad is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with pulley.monad.  If not, see <http://www.gnu.org/licenses/>.
#+end_comment

# Have Org export all headlines (or at least to level 100) as headings
#+options: H:100

* Introduction
  This document describes the design and implementation of =pulley.monad=,
  a Clojure library for composition and execution of monadic computations.
  Unlike other monad libraries, =pulley.monad= encourages users
  to express computations in a single monad
  — a "generic" monad, which constructs a computation which can then
  be applied to any number of concrete monad implementations.
  The monad operators, ~return~ and ~bind~, are implemented in terms
  of this generic monad.

  In other words, the Generic monad allows the details
  of a computational effect to be deferred until runtime.
  This late binding provides for a great deal of flexibility
  in the runtime behavior of a computation.
  Furthermore, different effects can be achieved with the same computation
  by varying the concrete implementation.

  This pattern is similar to polymorphic behavior available in other languages,
  such as Haskell's "type classes" and Scala's "implicits".
  Indeed, the implementation is similar to how one might expect
  such polymorphic code to be implemented in these languages
  -- a map of concrete operations is passed as an implicit argument
  to polymorphic functions.
  The primary difference is that in Haskell and Scala,
  the map of operations is completely transparent to the programmer
  and is constructed automatically based on the static types involved.
  In =pulley.monad=, the programmer has complete control
  over the operations map, and can tailor it dynamically to suite their needs.

  Thus, =pulley.monad= can be seen as providing a sort of framework
  for expressing "interpretters" for generic operations.
  In this way, =pulley.monad= is similar to the way Free monads
  are used to write layered "interpretters".
  However, =pulley.monad= achieves this result
  without introducing an intermediate data structure to represent a computation
  — all generic computations are expressed using compiled functions.

  All library code in this document is placed
  in the ~com.positronic-solutions.pulley.monad~ namespace:

  #+name: pulley.monad::ns
  #+begin_src clojure
    (ns com.positronic-solutions.pulley.monad)
  #+end_src
* The Generic Monad
  The Generic monad expresses a computation of type =G a= where:
  * =G= is the type of the Generic monad
  * =a= is the result type of the computation
  * =G a= denotes that type =G= is parameterized over some type =a=.

  The general idea is that =G a= represents a computation
  (i.e., a monadic value).
  However, the details of carrying out that computation is defered.

  This suggests an implementation where =G a= has type =Mops → M a= where:
  * =Mops= is an object containing the set of operations
    for implementing the monad =M=.
  * =M= is the monad type implemented by =Mops=.
    The type =M= depends on the value of =Mops=
    (i.e. different valued =Mops= will yield different =M='s).
    However, in this document, we treat =M= as a single type
    for the sake of brevity.
  * =a= is the result type of the computation.

  =Mops= is some representation of the operators
  for implementing some particular monad type =M=.
  In =pulley.monad=, an =Mops= is represented via a Clojure map
  containing (at least) the following keys:
  * ~::return~ :: Defines =M='s ~return~ operator.
  * ~::bind~ :: Defines =M='s ~bind~ operator

  In Haskell's terms, we can view =Mops= as a reification of a typeclass
  — i.e., it contains the set of methods for a particular instance
  of the typeclass.
  Specifically, an =Mops= provides an implementation of the =Monad= typeclass.

  Here and elsewhere in this document, unless otherwise noted,
  relatively namespaced keywords
  (such as ~::return~ and ~::bind~) are namespaced relative
  to the ~com.positronic-solutions.pulley.monad~ namespace
  (i.e., ~::return~ is interpretted as
  ~:com.positronic-solutions.pulley.monad/return~, etc.)
  By using namespaced keywords, we can allow users and other libraries
  to add arbitrary "extension methods" to an =Mops=
  without risk of naming conflicts
  (provided each participant chooses an appropriate, unique namespace
  for their keys).

  Because we allow for arbitrary extension methods to be added to the map,
  it may be useful for some implementations to have access
  to the method map.
  While =pulley.monad= does nothing to support this per se,
  it is possible to use [[https://github.com/positronic-solutions/pulley.objective][=pulley.objective=]] objects with =pulley.monad=.
  [[https://github.com/positronic-solutions/pulley.objective#persistentobject][Objective objects]] provide a map-like interface,
  but allow for dynamic calculations to be performed during lookup
  (via [[https://github.com/positronic-solutions/pulley.objective#properties][Objective properties]]).
  One application of this is [[https://github.com/positronic-solutions/pulley.objective#methods][Objective methods]],
  which provide a mechanism for implementing functions
  that have access to the instance object upon which it was invoked.
  The instance object is implicitly added to the front of the argument list
  when the method is inovoked.
  The operations implemented by =pulley.monad=
  maintain compatibility with Objective objects
  and Objectibe method invocations.
  Therefore, it's possible to use Objective objects in lieu of Clojure maps.

  So ~::return~ maps to a function of type =a → M a=
  (or an Objective method with effective type =Mops × a → M a=),
  and ~::bind~ to a function of type =M a × (a → M b) → M b=
  (or an Objective method with effective type =Mops × M a × (a → M b) → M b=).
  These are the types we would expect to see for a monad.

  Since the type of a generic computation =G a=
  is a function of type =Mops → M a=,
  in order to actually compute an =M a= from a =G a=
  we must extract the =M a= from that =G a= by supplying an appropriate =Mops=.
  We therefore define the ~run~ function,
  which takes a =G a= and an =Mops= and returns the corresponding =M a=.
  Since =G a= is =Mops → M a=,
  this is as simple as applying the given =G a= to the given =Mops=.

  #+name: run
  #+begin_src clojure
    (defn run
      "Executes the given generic monadic value mv
      with the (concrete) monad given by m."
      ([m mv]
        (mv m)))
  #+end_src

  Here ~m~ is an =Mops= and ~mv~ is a =G a=.
  ~run~ returns an =M a=, where =M= is the monad type defined by =Mops=.
* Implementing the Generic Monad
  This section describes the implementation of ~return~ and ~bind~
  for the generic monad.
** ~return~
   For a monad =G=, ~return~ is defined to have type =a → G a=.
   As described earlier, =G a= is the type =Mops → M a=.
   Therefore, ~return~ must have type =a → (Mops → M a)=.
   Conveniently, the ~::return~ function in =Mops= has type =Mops × a -> M a=.
   So ~return~ is:

   #+name: return
   #+begin_src clojure
     (defn return
       "Wraps the given pure value given by a into the generic monad."
       ([v]
         (fn [m]
           ((m ::return) v))))
   #+end_src

   We use the form ~(m ::return)~ to lookup ~::return~ in ~m~,
   rather than ~(get m ::return)~ or ~(::return m)~,
   because the first form is currently the only way
   that Objective objects resolve [[https://github.com/positronic-solutions/pulley.objective#properties][properties]].
   If we used one of the other ways,
   we would not be compatible with Objective methods.
** ~bind~
   ~bind~ has type =G a × (a → G b) → G b=.
   Expanding =G= as above, we get
   =(Mops → M a) × (a → (Mops → M b)) → (Mops → M b)=.
   It is tempting to define ~bind~ as follows:

   #+begin_src clojure
     (defn bind [mv f]
       (fn [m]
         ((m ::bind) mv f)))
   #+end_src

   However, while ~bind~'s ~mv~ parameter has type =G a=,
   the equivalent parameter to ~m~'s ~::bind~ method
   has type =M a=.
   Since =G a= is =Mops → M a=, this is easy to rectify
   by applying ~mv~ to ~m~
   (alternatively, we could use ~(run m mv)~).

   Similarly, ~bind~'s ~f~ parameter has type =a → G a=,
   but ~m~'s ~::bind~ requires an =a → M a=.
   So we need some function ~f′~ that will first apply ~f~
   to the given =a= value,
   then convert the resulting =G a= into an =M a=.
   Once again, this is easily accomplished via function application.
   Thus, ~f′~ is:

   #+begin_src clojure
     (fn [v]
       (run m (f v)))
   #+end_src

   In this case, we use ~run~ instead of ~((f v) m)~ for ease of reading.
   It also makes explicit that we are "running" ~(f v)~ in ~m~.

   We can now implement ~bind~:

   #+name: bind
   #+begin_src clojure
     (defn bind
       "Binds the generic monadic value mv to the given function f.

       If mv has type 'G a' (where G is the parameterized type
       identifying the generic monad), then f must have the type:

         a → G b"
       ([mv f]
         (fn [m]
           (let [f' (fn [v]
                      (run m (f v)))]
             ((m ::bind) (mv m) f')))))
   #+end_src
* Generic Operations
** Accessing Operation Maps
   Sometimes it's useful for a generic computation to gain access
   to the operations map.
   For example, a generic dispatch function would use the map
   to lookup the concrete implementation for the operation.

   It's trivial to gain such access in an ad-hoc fashion.
   For example:

   #+begin_src clojure
     (fn [ops]
       <do-something-with ops>)
   #+end_src

   Assuming ~<do-something-with ops>~ has type =G a=,
   this is a term in the Generic monad.
   However, this code depends on intimate knowledge
   of the representation of Generic terms.
   This is something we wish to encapsulate.
*** ~get-ops~
    To allow access to the operations map
    in a way that respects encapsulation of the Generic monad,
    we define ~get-ops~:

    #+name: get-ops
    #+begin_src clojure
      (defn get-ops
        "get-ops :: () → G Mops

        Returns the current operations map as a term in the Generic monad."
        ([]
          (fn [ops]
            ((ops ::return) ops))))
    #+end_src

    ~ops~ is a pure value that we wish to take into the Generic monad.
    ~get-ops~ returns a =G Mops= (which is =Mops → M Mops=).
    So we need to convert ~ops~ into a concrete monad term.
    We do this via the ~::return~ operation in ~ops~.

    To use the operations map in a computations,
    we simply ~bind~ the result of ~get-ops~:

    #+begin_src clojure
      (bind (get-ops)
            (comp return keys))
    #+end_src
**** Alternative Implementation
     We could define ~get-ops~ as follows:

     #+begin_src clojure
       (def get-ops (fn [ops]
                      ((ops ::return) ops)))
     #+end_src

     In this case, ~get-ops~ itself would be a Generic monad term
     (rather than returning a Generic monad term) and we could simply write:

     #+begin_src clojure
       (bind get-ops
             (comp return keys))
     #+end_src

     However, we use the former definition
     (requiring ~get-ops~ to be called in order to obtain a term)
     in order to make it clear that ~get-ops~ performs a computational effect.
*** ~bind-ops~
    When we use ~get-ops~, it is almost inevitably to ~bind~ it.
    While we can ~bind~ the result of ~get-ops~ easily enough,
    ~bind-ops~ provides a convenient way to perform this
    in one abstract step.

    ~bind-ops~ takes a function ~f~,
    and returns a Generic computation that ~binds~ the current operations map
    with ~f~.  Its implementation is straight-forward:

    #+name: bind-ops
    #+begin_src clojure
      (defn bind-ops
        "bind-ops :: (Mops → G b) → G b

        Returns a generic computation that binds the runtime operations map with f"
        ([f]
          (bind (get-ops)
                f)))
    #+end_src

    Now we can write:

    #+begin_src clojure
      (bind-ops (comp return keys))
    #+end_src
* Concrete Monad Implementations
  This section describes how concrete monads are implemented
  in terms of the Generic monad.

  To review, =G a= represents the type of a generic computation
  whose result type is a.
  In the present implementation, values of type =G a=
  are represented by the type =Mops → M a=,
  where =M= is a concrete monad,
  whose type is fixed by =Mops=.
  So a =G a= is a function which, when given a concrete monad implementation,
  computes a computation in that concrete monad.
  While we could call this function directly,
  it is preferrable to do so indirectly via ~run~.

  So far, we have been focusing on composing =G a='s.
  We will now shift our focus to the nature of =Mops=
  and the construction of =M a='s.
** Identity Monad
   The simplest monad is the "Identity" (or "Let") monad.
   Basically, the Identity monad takes a pure value into a computation
   as itself.

   In other words, ~return~ in the Identity monad is just Clojure's ~identity~.

   ~bind~ is almost as simple — all we need to do is apply the given function
   to the given value:

   #+name: identity-m/bind
   #+begin_src clojure
     (fn [mv f] (f mv))
   #+end_src

   We now have all we need to construct an =Mops= map:

   #+name: identity-m
   #+begin_src clojure :noweb yes
     (def identity-m
       {::return identity
        ::bind <<identity-m/bind>>})
   #+end_src

   This is nothing but the classic construction of the Identity monad.

   Now consider the following generic terms:

   #+name: test/terms
   #+begin_src clojure
     (def v1 (return 2))
     (def v2 (return 3))

     (def t1 (bind v1
                   (fn [x]
                     (bind v2
                           (fn [y]
                             (return (+ x y)))))))
   #+end_src

   ~v1~ and ~v2~ return the values 2 and 3 respectively.
   ~t1~ extracts the values from ~v1~ and ~v2~ and returns their sum.

   These terms are in the Generic monad.
   However, we can convert them to terms in the Identity monad
   by calling ~run~ with ~identity-m~:

   #+begin_src clojure
     (run identity-m t1)
   #+end_src

   This returns the value ~5~.
** List Monad
   Likewise, we can implement the standard List monad:

   #+name: list-m
   #+begin_src clojure
     (def list-m
       {::return (fn [v]
                   (list v))
        ::bind (fn [mv f]
                 (mapcat f mv))})
   #+end_src

   ~(run list-m t1)~ returns ~(5)~
   (that is, a singleton list containing ~5~).
** State Monad
   Finally, we can implement the State monad:

   #+name: state-m
   #+begin_src clojure
     (def state-m
       {::return (fn [v]
                   (fn [s]
                     [s v]))
        ::bind (fn [mv0 f]
                 (fn [s0]
                   (let [[s1 v1] (mv0 s0)
                         mv1 (f v1)]
                     (mv1 s1))))})
   #+end_src

   The State monad type is a function that accepts an initial state
   and returns a vector containing the new state and a value.
   So ~(run state-m t1)~ returns a function.
   If we pass that function an initial state,
   we obtain a ~[final-state value]~ pair.
   For example:

   #+begin_src clojure
     ((run state-m t1) {})
   #+end_src

   Returns ~[{} 5]~.
* Auxilliary Functions and Macros
** ~value~
   Sometimes, it's useful to explicitly provide an =M a=.
   For example, with ~list-m~ it would be nice to be able to write:

   #+begin_src clojure
     (run list-m
       (bind (range 2)
             (fn [x]
               (bind ["foo" "bar"]
                     (fn [y]
                       (return [x y]))))))
   #+end_src

   The intent here is to generate the cartisian product =[0 1] × ["foo" "bar]=:

   #+begin_src clojure
     ([0 "foo"]
      [0 "bar"]
      [1 "foo"]
      [1 "bar"])
   #+end_src

   However, ~(range 2)~ has ~list-m~'s =M a= type,
   but ~bind~ requires a =G a=, not an =M a=, here.
   So we need to somehow convert an =M a= into a =G a=.

   One might attempt to do this via ~return~
   (e.g., ~(return (range 2))~).
   However, since ~return~ has type =a → G a=
   (rather than =M a → G a=),
   ~return~ will turn an =M a=
   into a =G (M a)=, instead of the desired =G a=.

   Since =G a= is =Mops → M a=,
   it follows that we can convert an =M a= to a =G a=
   by wrapping the =M a= in a function.
   For example,

   #+begin_src clojure
     (fn [m]
       (range 2))
   #+end_src

   is a =G Long= value which, when ~run~, returns an =M a= value
   (where =M= is ~list-m~'s monad type, namely ~[]~ or ~clojure.lang.ISeq~).

   However, this is likely to be a fairly common pattern.
   Moreover, the particulars of the Generic monad implementation leak through.
   If we wish to change the way we implement the Generic monad in the future,
   it will be necessary to change all instances of this pattern
   to reflect the new implementation.

   So, in order to better encapsulate the Generic monad and reduce boiler-plate,
   we provide the ~value~ function.
   The ~value~ function takes a monadic value and wraps it
   into the Generic monad – i.e., it converts an =M a= into a =G a=.

   #+name: value
   #+begin_src clojure
     (defn value
       "Wraps the (concrete) monadic value mv into the generic monad."
       ([mv]
         (fn [m]
           mv)))
   #+end_src

   We can now write:

   #+begin_src clojure
     (run list-m
       (bind (value (range 2))
             (fn [x]
               (bind ["foo" "bar"]
                     (fn [y]
                       (return [x y]))))))
   #+end_src
** ~>>=~
   Our implementation of ~bind~ takes exactly two arguments,
   just like Haskell's bind operator, ~>>=~.
   Since Clojure allows variadic functions,
   it would seem natural to provide a variadic version of ~bind~,
   which we will call ~>>=~.

   #+name: >>=
   #+begin_src clojure
     (defn >>=
       "Monad sequencing operator, with value passing.

       Basically, this is a variadic version of bind."
       ([mv & fs]
        (reduce bind mv fs)))
   #+end_src

   We can now use ~>>=~ to "thread" computations
   (similar to Clojure's threading macros, e.g. ~->~):

   #+begin_src clojure
     (run identity-m
       (>>= (return 5)
            (comp return inc)
            (fn [x]
              (return (* 2 x)))))
   #+end_src

   This example starts with the value ~5~,
   increments it, then doubles the incremented value.
   Note the use of ~return~ to wrap the "pure" values
   returned by ~inc~ and ~*~.
** ~>>~
   Sometimes the purpose of executing a computation
   is solely for producing side-effects.
   In these cases, we don't care what the resulting value is —
   we just need to execute the computation.

   Haskell provides a ~>>~ function for this.
   It takes two monadic values and returns a new monadic value which,
   when executed, first executes the computation embodied
   in the first monadic value,
   then executes the computation embodied in the second monadic value.
   The result of the first computation is discarded,
   while the result of the second may be bound (via ~bind~)
   to another computation.

   Our ~>>~ function is similar to Haskell's ~>>~,
   but our ~>>~ is variadic.
   All values are discarded, except the one produced by the last computation.

   #+name: >>_
   #+begin_src clojure
     (defn >>
       "Monad sequencing operator.

       This is essentially a non-value-passing version of >>=:
       ,* It accepts monadic values, not functions
       ,* The monadic values are computed in order
       ,* The value of all but the last computation is discarded
       ,* The value of the last computation is the value of the entire >> expression"
       ([mv & mvs]
         (let [transform (fn [mv]
                           (fn [v]
                             mv))]
           (reduce bind mv (map transform mvs)))))
   #+end_src
** ~m-let~
   While monads provide a wonderful framework for composing computations,
   the functional notation for /writing/ such descriptions
   can quickly lead to degenerate levels nesting.

   For example, here's a monadic function that composes a computation
   to calculate the euclidean distance between two points:

   #+begin_src clojure
     (defn distance [mp1 mp2]
       (let [sqrt (fn [x]
                    (Math/sqrt x))
             square (fn [x]
                      (* x x))]
         (bind mp1
               (fn [p1]
                 (bind mp2
                       (fn [p2]
                         (return (->> (map - p1 p2)
                                      (map square)
                                      (reduce +)
                                      (sqrt)))))))))
   #+end_src

   Even in this simple example, we can start to see a definite "lean"
   to the code.
   It might seem like we could combine both ~bind~'s
   into a single call to ~>>=~.
   However, we need to use the values extracted from both ~mp1~ and ~mp2~
   in the computation of the final result.
   So this nesting really is necessary.

   In cases like this, a little syntactic sugar can go a long way.
   For example, the use of ~->>~ in the above example obviates the need
   for nesting within that expression — ~->>~ hides the nesting from us.
   For monads, Haskell provides "~do~-notation",
   which hides the nesting of ~>>=~ (~bind~) expressions.
   For example, we might express the above example in Haskell as follows:

   #+begin_src haskell
     distance mp1 mp2 = do p1 <- mp1
                           p2 <- mp2
                           return (sqrt squareDist)
                             where diff = zipWith - p1 p2
                                   squareDiff = map (^2) diff
                                   squareDist = foldl (+) squareDiff
   #+end_src

   This avoids nesting, while still letting us express the notion
   of binding the result of ~mp1~ to the name ~p2~,
   the result of ~mp2~ to the name ~p2~,
   then computing a final result from the values of ~p1~ and ~p2~.

   In a lot of cases (though not in every case),
   there will be some number of "binding expressions"
   followed by a single result expression.
   This is reminiscent of Clojure's ~let~ form
   — the main difference is that ~do~ binds variables
   to the result of executing a monadic value,
   rather than the direct result of an expression.

   In other words, we can capture the essence of Haskell's ~do~-notation
   by introducing a monadic version of ~let~.
   With such a macro, which we'll call ~m-let~,
   we can now write the example above as:

   #+begin_src clojure
     (defn distance [mp1 mp2]
       (let [sqrt (fn [x]
                    (Math/sqrt x))
             square (fn [x]
                      (* x x))]
         (m-let [p1 mp1
                 p2 mp2]
                (return (->> (map - p1 p2)
                             (map square)
                             (reduce +)
                             (sqrt))))))
   #+end_src

   We can define ~m-let~ as:

   #+name: m-let
   #+begin_src clojure
     (defmacro m-let
       "[bindings body]

       bindings -> [name expr & bindings]

       Binds each name in bindings to the corresponding monadic expression,
       then runs the monadic expressions given in the body."
       {:style/indent 1}
       ([bindings & body]
         (if (empty? bindings)
           `(>> ~@body)
           (let [[name expr & bindings'] bindings]
             `(bind ~expr (fn [~name]
                            (m-let [~@bindings']
                              ~@body)))))))
   #+end_src

   The implementation is straight-forward:
   * If there are no bindings, transform the ~body~.
     The ~body~ is a sequence of monadic expressions,
     so we just wrap them with ~>>~.
   * If there are bindings, transform the first binding:
     * Extract the variable name (~name~)
       and associated monadic expression (~expr~).
       (These are, respectively, the first two elements in ~bindings~.)
     * ~bind~ ~expr~ to ~name~.
       We do this via a function of a single parameter,
       whose name is given by ~name~.
       The body of this function expands to an ~m-let~ expression
       of the rest of the bindings (~bindings′~).

   As noted above, the ~body~ expressions are wrapped in ~>>~.
   So while all the ~body~ expressions are executed,
   the result of all but the last expression will be discarded.
   This is in line with the semantics of Clojure's ~let~.

   It's also worth emphasizing that all ~body~ expressions
   are /monadic/ expressions.
   That is, they must have type =G a=, rather than =a=.
   This is contrary to [[https://github.com/clojure/algo.monads][=algo.monad=]]'s ~domonad~ macro
   which wraps the body expression in an implicit ~return~.
   While this may seem convenient,
   it promotes a pattern where we bind a value to a variable,
   only to immediately (implicitly) wrap it in ~return~.
   So, in a sense, ~m-let~ would not be conducive
   to "proper tail recursion" if it wrapped the body with ~return~.
   On the other hand,
   it is a trival matter to explicitly wrap these expressions with ~return~
   when necessary.
* Future Work
  * We use maps of operations
    to implement a form of Haskell's notion of a typeclass.
    There may be other cases that could benefit
    from a generic implementation of a typeclass,
    suggesting a library abstracting typeclasses.
  * The relationship between the Generic monad presented here
    and the Free monad should be explored further.
    On the surface, they appear to express similar ideas — generic computations.
    However, they seem to take slightly different approaches.
    It may be that the Free monad is a better abstraction.
    The Generic monad is capable of being used with /any/ monad.
    Since the Free monad turns any functor into a monad,
    and monads are a subclass of functors,
    the same would appear to hold for the Free monad as well.
  * It will be interesting to see what uses
    for the Generic monad can be found.
    Potential applications include:
    * Generic code transformation.
      By parameterizing operations via the Generic monad,
      a single transform can be used to achieve a variety of effects
      (e.g., continuations, tracing / debugging, cooperative multitasking).
    * Composable "interpretters", which might be implemented as follows:
      * Code is written against generic operations
        (operations whose implementation will be provided
        in the operations map).
      * Various "interpretters" provide implementations for those operations.
      * Interpretters can write against operations provided
        by other interpretters.
      * Interpretters can be combined to implement [[http://degoes.net/articles/modern-fp-part-2][onion architectures]].
* Source Code
** =monad.clj=
   #+begin_src clojure :noweb yes :mkdirp yes :tangle src/clj/com/positronic_solutions/pulley/monad.clj
     ;; Copyright 2016 Positronic Solutions, LLC.
     ;;
     ;; This file is part of pulley.monad.
     ;;
     ;; pulley.monad is free software: you can redistribute it and/or modify
     ;; it under the terms of the GNU Lesser General Public License as published by
     ;; the Free Software Foundation, either version 3 of the License, or
     ;; (at your option) any later version.
     ;;
     ;; pulley.monad is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.
     ;;
     ;; You should have received a copy of the GNU Lesser General Public License
     ;; along with pulley.monad.  If not, see <http://www.gnu.org/licenses/>.

     <<pulley.monad::ns>>

     <<run>>

     <<return>>

     <<bind>>

     <<get-ops>>

     <<bind-ops>>

     <<value>>

     <<>>=>>

     <<>>_>>

     <<m-let>>

     <<identity-m>>

     <<list-m>>

     <<state-m>>
   #+end_src
